package com.service.parking.parksepeti.Controller.Adapters;import android.content.Context;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.service.parking.parksepeti.Model.LocationPin;import com.service.parking.parksepeti.R;import com.squareup.picasso.Picasso;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;public class ParkYerlerimAdapter extends RecyclerView.Adapter<ParkYerlerimAdapter.MySpotsViewHolder> {    private List<LocationPin> locationPinList;    private Context con;    public ParkYerlerimAdapter(List<LocationPin> locationPinList, Context con) {        this.locationPinList = locationPinList;        this.con = con;    }    @NonNull    @Override    public MySpotsViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        con = parent.getContext();        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.my_spots_layout, parent, false);        return new MySpotsViewHolder(itemView);    }    @Override    public void onBindViewHolder(@NonNull final MySpotsViewHolder myViewHolder, int i) {        LocationPin pin = locationPinList.get(i);        Log.d("RANDOM :", pin.getPinloc().toString());        myViewHolder.mPrice.setText(pin.getPrice());        myViewHolder.mNo_of_space.setText(pin.getNumberofspot());        myViewHolder.mSpot_type.setText(pin.getType());        Double lat = pin.getPinloc().get("lat");        Double lon = pin.getPinloc().get("long");        String api_key = "AIzaSyDBrsuKvX_2JUxEM6vl6l8XkUXEzCusG9I";        String api_key2 = "AIzaSyDBrsuKvX_2JUxEM6vl6l8XkUXEzCusG9I";        String url ="https://maps.googleapis.com/maps/api/staticmap?";        url+="&zoom=13";        url+="&size=600x200";        url+="&maptype=roadmap";        url+="&markers=color:green%7Clabel:G%7C"+lat+", "+lon;        url+="&key="+ api_key;        Log.d("RANDOM :",url);        Picasso.get().load(url).into(myViewHolder.mSpot_map_image);    }    @Override    public void onViewRecycled(@NonNull MySpotsViewHolder holder) {        super.onViewRecycled(holder);    }    @Override    public int getItemCount() {        return locationPinList.size();    }    class MySpotsViewHolder extends RecyclerView.ViewHolder //implements OnMapReadyCallback    {        @BindView(R.id.spot_type)        TextView mSpot_type;        @BindView(R.id.spot_price)        TextView mPrice;        @BindView(R.id.no_of_spots)        TextView mNo_of_space;        @BindView(R.id.spotMapImageView)        ImageView mSpot_map_image;        MySpotsViewHolder(View view) {            super(view);            ButterKnife.bind(this, view);        }    }}